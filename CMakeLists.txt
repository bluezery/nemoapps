PROJECT(nemoapps)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)

cmake_policy(VERSION 2.8)

SET(nemoapps_VERSION_MAJOR 0)
SET(nemoapps_VERSION_MINOR 1)

SET(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

SET(BIN_DIR  "${CMAKE_INSTALL_PREFIX}/bin")
SET(DOC_DIR  "${CMAKE_INSTALL_PREFIX}/share/doc/${PROJECT_NAME}")
SET(DATA_DIR "${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}")
SET(ICON_DIR "${DATA_DIR}/icons")
SET(IMG_DIR "${DATA_DIR}/images")
SET(SOUND_DIR "${DATA_DIR}/sounds")
SET(ETC_DIR "/etc/${PROJECT_NAME}")

SET(CMAKE_INSTALL_LIBDIR "${CMAKE_INSTALL_PREFIX}/lib${CMAKE_LIBRARY_SUFFIX}")
SET(CMAKE_INSTALL_INCDIR "${CMAKE_INSTALL_PREFIX}/include")
SET(CMAKE_INSTALL_PKGDIR "${CMAKE_INSTALL_LIBDIR}/pkgconfig")

ADD_DEFINITIONS(-DPROJECT_NAME="${PROJECT_NAME}")
ADD_DEFINITIONS(-DBIN_DIR="${BIN_DIR}")
ADD_DEFINITIONS(-DDATA_DIR="${DATA_DIR}")
ADD_DEFINITIONS(-DICON_DIR="${ICON_DIR}")
ADD_DEFINITIONS(-DIMG_DIR="${IMG_DIR}")
ADD_DEFINITIONS(-DSOUND_DIR="${SOUND_DIR}")
ADD_DEFINITIONS(-DETC_DIR="${ETC_DIR}")

#SET(BUILD_SHARED_LIBS ON)

FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(NEMO REQUIRED nemoapps nemobus uuid)
INCLUDE_DIRECTORIES(${NEMO_INCLUDE_DIRS})
LINK_DIRECTORIES(${NEMO_LIBRARY_DIRS})

#PKG_CHECK_MODULES(HARFBUZZ REQUIRED harfbuzz)
#INCLUDE_DIRECTORIES(${HARFBUZZ_INCLUDE_DIRS})
#LINK_DIRECTORIES(${HARFBUZZ_LIBRARY_DIRS})

PKG_CHECK_MODULES(COMMON REQUIRED expat pixman-1 json-c libcurl MagickWand sqlite3 ao libudev mount libprocps dbus-1 
    libcrypto
    libavutil libavcodec)
INCLUDE_DIRECTORIES(${COMMON_INCLUDE_DIRS})
LINK_DIRECTORIES(${COMMON_LIBRARY_DIRS})

PKG_CHECK_MODULES(GLIB REQUIRED glib-2.0)
INCLUDE_DIRECTORIES(${GLIB_INCLUDE_DIRS})
LINK_DIRECTORIES(${GLIB_LIBRARY_DIRS})

#PKG_CHECK_MODULES(GSTREAMER REQUIRED gstreamer-1.0 gstreamer-pbutils-1.0)
#INCLUDE_DIRECTORIES(${GSTREAMER_INCLUDE_DIRS})
#LINK_DIRECTORIES(${GSTREAMER_LIBRARY_DIRS})

PKG_CHECK_MODULES(GL REQUIRED gl egl)
INCLUDE_DIRECTORIES(${GL_INCLUDE_DIRS})
LINK_DIRECTORIES(${GL_LIBRARY_DIRS})

PKG_CHECK_MODULES(SKIA REQUIRED skia)
INCLUDE_DIRECTORIES(${SKIA_INCLUDE_DIRS})
LINK_DIRECTORIES(${SKIA_LIBRARY_DIRS})

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DMAGICKCORE_QUANTUM_DEPTH=16 -DMAGICKCORE_HDRI_ENABLE=0")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}")
SET(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS}")

IF(WITH_OPTIMIZE)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -Wno-unused-result")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wno-unused-result")
ENDIF(WITH_OPTIMIZE)

IF(WITH_DEBUG)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
ENDIF(WITH_DEBUG)

IF(WITH_PROFILE)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
	SET(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} -pg")
ENDIF(WITH_PROFILE)

SET(WITH_CONNMAN ON)
IF(WITH_CONNMAN)
    ADD_DEFINITIONS(-DWITH_CONNMAN)
ENDIF(WITH_CONNMAN)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-color=auto -Wall -fPIC")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,defs -Wl,--as-needed -Wl,--hash-style=both")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -std=c++11")

SET(NEMOAPPS_COMMON_LIBRARIES
    m
    rt
    jpeg
    magic
    pthread
    sndfile
    ${NEMO_LIBRARIES}
    ${COMMON_LIBRARIES}
	)

INCLUDE_DIRECTORIES(
    #${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_SOURCE_DIR}/util
    ${CMAKE_SOURCE_DIR}/helper
    ${CMAKE_SOURCE_DIR}/thirds
    ${CMAKE_SOURCE_DIR}/view/
    ${CMAKE_SOURCE_DIR}/widget/
    ${CMAKE_SOURCE_DIR}/graph/
    ${CMAKE_SOURCE_DIR}/sound/
    )

SET(CONFXML "base.conf")
CONFIGURE_FILE(${CONFXML}.in ${CONFXML} @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CONFXML}
    DESTINATION ${ETC_DIR}
    )

ADD_SUBDIRECTORY(icons)
ADD_SUBDIRECTORY(images)

ADD_SUBDIRECTORY(helper)
ADD_SUBDIRECTORY(util)
ADD_SUBDIRECTORY(widget)
ADD_SUBDIRECTORY(graph)
ADD_SUBDIRECTORY(sound)

ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(clock)
ADD_SUBDIRECTORY(clock2)
ADD_SUBDIRECTORY(stat)
ADD_SUBDIRECTORY(text)
ADD_SUBDIRECTORY(weather)
ADD_SUBDIRECTORY(3d)
ADD_SUBDIRECTORY(explorer)
ADD_SUBDIRECTORY(explorer2)
ADD_SUBDIRECTORY(browser)
ADD_SUBDIRECTORY(player)
ADD_SUBDIRECTORY(pdf)
ADD_SUBDIRECTORY(image)
ADD_SUBDIRECTORY(keyboard)
ADD_SUBDIRECTORY(card)
ADD_SUBDIRECTORY(background)
ADD_SUBDIRECTORY(screensaver)
ADD_SUBDIRECTORY(udevd)
IF(WITH_CONNMAN)
    ADD_SUBDIRECTORY(connmand)
ENDIF(WITH_CONNMAN)
ADD_SUBDIRECTORY(demo)
ADD_SUBDIRECTORY(remote)
ADD_SUBDIRECTORY(wall)
ADD_SUBDIRECTORY(multiplayer)
#ADD_SUBDIRECTORY(map)
#ADD_SUBDIRECTORY(bistro)
##ADD_SUBDIRECTORY(rdp)
#ADD_SUBDIRECTORY(sketch)
